language ESSENCE' 1.0

letting D be domain int(1..4)
letting Ds be {1,2,3,4}

letting C be domain int(0..2)

given fixed : matrix indexed by [D,D] of int(0..4) 

$#VAR grid
find grid : matrix indexed by [D,D] of D

$#CON con_alldiff "cells ({a[0]},{a[1]}) and ({a[0]},{a[2]}) cannot both be {a[3]} as they are in the same column"
find con_alldiff: matrix indexed by [D,D,D,D] of bool

$#CON row_alldiff "cells ({a[0]},{a[1]}) and ({a[0]},{a[2]}) cannot both be {a[3]} as they are in the same row"
find row_alldiff: matrix indexed by [D,D,D,D] of bool

$#CON box_alldiff "cells ({2*int(a[0])+int(a[1])},{2*int(a[1])+int(a[3])}) and ({2*int(a[0])+int(a[4])},{2*int(a[1])+int(a[5])}) cannot both be {a[6]} as they are in the same box"
find box_alldiff: matrix indexed by [C,C,C,C,C,C,D] of bool

such that
forAll i,j: D.
    fixed[i,j] != 0 -> grid[i,j]=fixed[i,j],

forAll i:D.
    forAll j1,j2:D. j1 < j2 ->
        forAll d:D. con_alldiff[i,j1,j2,d] -> !(grid[i,j1] = d /\ grid[i,j2]=d),


forAll j:D.
    forAll i1,i2:D. i1 < i2 ->
        forAll d:D. row_alldiff[j,i1,i2,d] -> !(grid[i1,j] = d /\ grid[i2,j]=d),


forAll a,b,i1,j1,i2,j2:C. (i1*2+j1) < (i2*2+j2) ->
    (
        forAll d:D. box_alldiff[a,b,i1,j1,i2,j2,d] ->
            !(grid[1+2*a+i1,1+2*b+j1] = d /\ grid[1+2*a+i2,1+2*b+j2] = d)
    ),

1=1
$and(flatten([flatten(con_alldiff),flatten(row_alldiff),flatten(box_alldiff),flatten(orthogonally),flatten(king),flatten(knight)]))